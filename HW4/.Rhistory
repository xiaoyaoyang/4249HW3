test <-'4+3'
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
temp.sign
str_join(temp.sign,num)
str_join(temp.sign,num[2])
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
result
str_join(temp.sign,num)
test <-'-4+5'
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
str_join(temp.sign,num)
num.new <- as.numeric(str_join(temp.sign,num))
num.new
Evaluated <- function()
{
#extract number
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if length(temp.sign==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else{stop(input error)}
return(result)
}
Evaluated <- function()
{
#extract number
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if length(temp.sign==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop(input error)
}
return(result)
}
Evaluated <- function()
{
#extract number
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if length(temp.sign==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop('input error')
}
return(result)
}
length(temp.sign)==length(num)
Evaluated <- function()
{
#extract number
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign==1) )
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop('input error')
}
return(result)
}
Evaluated(test)
test <-'-4+5'
test <- textformula
Evaluated <- function(textformula)
{
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign==1) )
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop('input error')
}
return(result)
}
Evaluated(test)
test
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
length(temp.sign==1)
length(temp.sign)==1
Evaluated <- function(textformula)
{
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop('input error')
}
return(result)
}
Evaluated(test)
Evaluated('1-1')
Evaluated('1-100')
Evaluated('1+10')
Evaluated('1+200')
Evaluated('1*200')
test <-'1*1'
unlist(str_split(string=test,pattern='\\+|\\-'))
Evaluated <- function(textformula)
{
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
if(length(temp)!=2) stop('input error (must be plus or minus)')
num <- as.numeric(na.omit(as.numeric(temp)))
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop('input error')
}
return(result)
}
Evaluated('1+1.1')
Evaluated('1+1.1111')
Evaluated('1*1')
Evaluated('1/1')
Evaluated('1+-1')
Evaluated('-1+1')
test <-'-4+5'
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
temp
Evaluated <- function(textformula)
{
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num)
}
else
{
stop('input error')
}
return(result)
}
Evaluated('-1+1')
Evaluated('10-2')
Evaluated('-10-2')
test <- '-10-10'
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
num
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
temp.sign
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
length(temp.sign)==length(num)
Evaluated <- function(textformula)
{
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num.new)
}
else
{
stop('input error')
}
return(result)
}
Evaluated('-10-10')
Evaluated('-10+10')
Evaluated('+10-10')
Evaluated('-10-10')
Evaluated('1029301-12312313')
Evaluated('1029301-0')
Evaluated('1029301--1')
Evaluated('1029301-----1')
Evaluated('1029301--1')
pattern <- '([[:digit:]]{2}) (\\+|\\-) ([[:digit:]])'
str_split(string=test,pattern=pattern)
str_extract(string=test,pattern=pattern)
str_extract(string=test,pattern=pattern)
pattern
pattern <- '([[:digit:]]+) (\\+|\\-) ([[:digit:]]+)'
str_extract(string=test,pattern=pattern)
pattern
pattern <- '([[:digit:]]) (\\+|\\-) ([[:digit:]])'
str_extract(string=test,pattern=pattern)
sub(pattern = regexp, replacement = "\\1", x = string) # returns the first part of the regular expression
string <- "23 mai 2000"
regexp <- "([[:digit:]]{2}) ([[:alpha:]]+) ([[:digit:]]{4})"
sub(pattern = regexp, replacement = "\\1", x = string) # returns the first part of the regular expression
sub(pattern = pattern, replacement = "\\1", x = '-10-10')
sub(pattern = pattern, replacement = "\\1", x = '-10-10')
pattern
pattern <- '([[:digit:]]) ([[:alpha:]]+) ([[:digit:]])'
sub(pattern = pattern, replacement = "\\1", x = '-10-10')
test
str_extract(test,pattern=\\d)
str_extract(test,pattern='\\d')
str_extract_all(test,pattern='\\d')
str_extract_all(test,pattern='\\d+')
test1 <-'-4+5'
test2 <-'4+3'
test3 <- '-10-10'
str_extract_all(test2,pattern='\\d+')
str_extract_all(test1,pattern='\\d+')
str_extract(strings, phone)
Evaluated <- function(textformula)
{
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num.new)
}
else
{
stop('input error')
}
return(result)
}
Evaluted('1+1010')
Evaluated('1+1010')
lm
logical
logical(require(stringr))
require(freestats)
require()
fakedata
fakedata(1,100)
fakedata(c(1,1),100)
?fakedata
Evaluated('1+1')
Evaluated('100+100')
Evaluated(c('100+100','1+1'))
pi
'pi+3'
Evaluated('pi+3')
Evaluated('3.1421412442+3')
Evaluated('3.1421412442+3.124124124')
! require(MASS)
! require(MASS)
if(!require(stringr))
if(!require(stringr)) require(stringr)
#a, b can be any number
Evaluated <- function(textformula)
{
if(!require(stringr)) require(stringr)
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-'))
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==length(num))
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num.new)
}
else
{
stop('input error')
}
return(result)
}
norm
?norm
install.packages('forecast')
require(forecast)
require(stringr)
#Problem 1
#find type
string1 <- paste(readLines('problem1.txt'),sep='',collapse='\n')
string1 <- str_replace_all(string=string1,pattern='\n',replacement='')
strings <- paste(readLines('problem1.txt'),sep='',collapse='\n')
strings <- str_replace_all(string=strings,pattern='\n',replacement='')
typep <- '[a-zA-Z]{4}[:punct:][ ]*[1]?[-]?([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})'
type <- unlist(str_extract_all(string=strings,pattern=typep))
type <- gsub(pattern=' ',replacement='',x=type)
type
require(stringr)
#Problem 1
#find type
strings <- paste(readLines('problem1.txt'),sep='',collapse='\n')
setwd("~/Google Drive/Schoolwork/2014Spring/W4249/HW4")
setwd("~/Google Drive/Schoolwork/2014Spring/W4249/HW4")
strings <- paste(readLines('problem1.txt'),sep='',collapse='\n')
strings <- str_replace_all(string=strings,pattern='\n',replacement='')
typep <- '[a-zA-Z]{4}[:punct:][ ]*[1]?[-]?([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})'
type <- unlist(str_extract_all(string=strings,pattern=typep))
type <- gsub(pattern=' ',replacement='',x=type)
type
type
str_detect(type,'work')
type_work <- str_detect(type,'work')
length(type_work)
length(type)
type[type_work,]
type[type_work]
sum(type_work)
type_home <- str_detect(type,'home')
type[type_home]
sum(type_home)
type_cell <- str_detect(type,'cell')
type[type_cell]
sum(type_cell)
test<-'-4--4'
if(!require(stringr)) require(stringr)
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-|\\--|\\++'))
temp.sign
str_detect(temp.sign,'[--]|[++]')
str_detect(temp.sign,'[--]')
str_detect(temp.sign,[1])
str_detect(temp.sign,'[1]')
str_detect(temp.sign,'[-]')
str_detect(temp.sign,'[+]')
str_detect(temp.sign,'[++]')
str_detect(temp.sign,'[-][-]')
str_detect(temp.sign,'[-][-]|[+][-]')
str_detect('+-','[-][-]|[+][-]')
str_detect('-','[-][-]|[+][-]')
str_detect('-+','[-][-]|[+][-]')
str_detect('-','[-][-]|[+][-]|[-][+]|[+][+]')
#a, b can be any number
Evaluated <- function(textformula)
{
if(!require(stringr)) require(stringr)
#extract number
test <- textformula
temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
num <- as.numeric(na.omit(as.numeric(temp)))
if(length(num)!=2) stop('input error (must be plus or minus)')
#determine sign
temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-|\\--|\\++'))
if(sum(str_detect(temp.sign,'[-][-]|[+][-]|[-][+]|[+][+]')))
{
return(test)
}
else
{
for(i in 1:length(temp.sign))
{
if(temp.sign[i]=='--') temp.sign[i]<-'+'
}
if (length(temp.sign)==1)
{
num[2] <- as.numeric(str_join(temp.sign,num[2]))
result <- sum(num)
}
else if(length(temp.sign)==2)
{
num.new <- as.numeric(str_join(temp.sign,num))
result <- sum(num.new)
}
else
{
stop('input error')
}
return(result)
}
}
ans <- vector()
for(j in 1:length(dat2))
{
ans[j] <- Evaluated(dat2[j])
}
ans
@
dat2 <- scan('problem2.txt',character(0))
ans <- vector()
for(j in 1:length(dat2))
{
ans[j] <- Evaluated(dat2[j])
}
ans
@
setwd("~/Google Drive/Schoolwork/2014Spring/W4249/HW4")
require(stringr)
#Problem 1
#find type
strings <- paste(readLines('problem1.txt'),sep='',collapse='\n')
strings <- str_replace_all(string=strings,pattern='\n',replacement='')
strings
