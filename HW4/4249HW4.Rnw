\documentclass[11pt]{article}
\lstset{breaklines=true}
<<setup, include=FALSE>>=
    render_listings()
@

\setlength{\topmargin}{-.5in}
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{.125in}
\setlength{\textwidth}{6.25in}


\usepackage{graphicx}

\title{Applied Data Science}
\author{Xiaoyao Yang\\ Columbia University}
\date{\today}

\begin{document}
\maketitle


\section{Finding phone type}
<<r1>>=
require(stringr)
#Problem 1
#find type
strings <- paste(readLines('problem1.txt'),sep='',collapse='\n')
strings <- str_replace_all(string=strings,pattern='\n',replacement='')
typep <- '[a-zA-Z]{4}[:punct:][ ]*[1]?[-]?([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})'
type <- unlist(str_extract_all(string=strings,pattern=typep))
type <- gsub(pattern=' ',replacement='',x=type)
type
length(type)
type_work <- str_detect(type,'work') 
type[type_work]
sum(type_work)
type_home <- str_detect(type,'home') 
type[type_home]
sum(type_home)
type_cell <- str_detect(type,'cell') 
type[type_cell]
sum(type_cell)
@

\section{Extra credit:area code in parenthesis}
<<r2>>=
#find area code!!!!!!
areap <- '[\\(]([2-9][0-9]{2})[\\)][ ]*([0-9]{3})[- .]([0-9]{4})'
str_extract_all(string=strings,pattern=areap)
@

\section{Calculate text(also used for extra credit)}
<<r3>>=
dat2 <- scan('problem2.txt',character(0))
#only used for single text input 'a+b' or '+-a-b'
#a, b can be any number
Evaluated <- function(textformula)
{
    if(!require(stringr)) require(stringr)
    #extract number
    test <- textformula
    temp <- unlist(str_split(string=test,pattern='\\+|\\-'))
    num <- as.numeric(na.omit(as.numeric(temp)))
    if(length(num)!=2) stop('input error (must be plus or minus)')
    #determine sign
    temp.sign <- unlist(str_extract_all(string=test,pattern='\\+|\\-|\\--|\\++'))
    if(sum(str_detect(temp.sign,'[-][-]|[+][-]|[-][+]|[+][+]'))) 
    {
        return(test)
    }
else 
{
        for(i in 1:length(temp.sign))
    {
        if(temp.sign[i]=='--') temp.sign[i]<-'+'
            
    }

    if (length(temp.sign)==1)
   {
        num[2] <- as.numeric(str_join(temp.sign,num[2]))
        result <- sum(num)
    }
else if(length(temp.sign)==2)
{
    num.new <- as.numeric(str_join(temp.sign,num))
    result <- sum(num.new)
}
else
{
    stop('input error')
}
return(result)
}

}

ans <- vector()
for(j in 1:length(dat2))
{
    ans[j] <- Evaluated(dat2[j])
}
ans
@


\end{document}